{"version":3,"sources":["Header.js","displayMeme.js","MemeGen.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","height","width","displayMeme","props","className","onSubmit","handleSubmit","type","name","placeholder","value","state","topText","onChange","handleChange","topColor","handleColorChnage","topBorderColor","bottomText","bottomColor","bottomBorderColor","onClick","document","getElementById","click","id","handleFileChange","checkImageHeight","maxHeight","newheight","newwidth","MemeGenerator","url","allMemeImgs","image","undefined","updateImage","Math","floor","window","innerHeight","componentDidMount","bind","setImage","setText","fetch","then","response","json","memes","data","console","log","setState","this","myCanvas","context","getContext","img","Image","onload","drawImage","font","topWidth","measureText","bottomWidth","strokeStyle","strokeText","fillStyle","fillText","event","target","setTimeout","preventDefault","randNum","random","length","scope","URL","createObjectURL","files","Component","App","MemeGen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yKAiBeA,MAff,WACI,OACI,gCACI,yBAEIC,IAAI,iEACJC,IAAI,WACJC,OAAO,QACPC,MAAM,UAEV,+C,0CCoEGC,MA9Ef,SAAqBC,GACjB,OACI,yBAAKC,UAAU,YACX,0BAAMA,UAAU,YAAYC,SAAUF,EAAMG,cACxC,2BACIC,KAAK,OACLC,KAAK,UACLC,YAAY,WACZC,MAAOP,EAAMQ,MAAMC,QACnBC,SAAUV,EAAMW,eAEpB,6BACA,+BACI,8CACA,2BACIP,KAAK,QACLC,KAAK,WACLE,MAAOP,EAAMQ,MAAMI,SACnBF,SAAUV,EAAMa,qBAGxB,6BACA,+BACI,iDACA,2BACIT,KAAK,QACLC,KAAK,iBACLE,MAAOP,EAAMQ,MAAMM,eACnBJ,SAAUV,EAAMa,qBAGxB,6BACA,2BACIT,KAAK,OACLC,KAAK,aACLC,YAAY,cACZC,MAAOP,EAAMQ,MAAMO,WACnBL,SAAUV,EAAMW,eAEpB,6BACA,+BACI,+CACA,2BACIP,KAAK,QACLC,KAAK,cACLE,MAAOP,EAAMQ,MAAMQ,YACnBN,SAAUV,EAAMa,qBAGxB,6BACA,+BACI,iDACA,2BACIT,KAAK,QACLC,KAAK,oBACLE,MAAOP,EAAMQ,MAAMS,kBACnBP,SAAUV,EAAMa,qBAGxB,6BACA,4BAAQT,KAAK,UAAb,OACA,iCACA,4BAAQH,UAAU,oBAAoBG,KAAK,SAASc,QAAS,WAC3CC,SAASC,eAAe,eAChCC,UAFV,qBAIA,2BAAOC,GAAG,cAAclB,KAAK,OAAOM,SAAUV,EAAMuB,oBAExD,yBAAKtB,UAAU,QACX,gCACI,4BAAQqB,GAAG,YAAYxB,MAAM,QAAQD,OAAO,cCrE1D2B,EAAmB,SAAC1B,EAAOD,EAAQ4B,GACrC,IAAIC,EAAY7B,EACZ8B,EAAW7B,EACXD,EAAO4B,IAEPE,EAAW7B,GADC2B,EAAU5B,GAEtB6B,EAAYD,GAEhB,MAAO,CAACC,YAAWC,aAyIRC,E,kDArIX,aAAe,IAAD,8BACV,gBASKpB,MAAQ,CACTC,QAAS,GACTG,SAAU,UACVE,eAAgB,UAChBC,WAAY,GACZC,YAAa,UACbC,kBAAmB,UACnBpB,OAAQ,IACRC,MAAO,IACP+B,IAAK,gCACLC,YAAa,GACbC,WAAOC,EACPC,aAAa,EACbR,UAAWS,KAAKC,MAAyB,GAAnBC,OAAOC,cAEjC,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAK1B,kBAAoB,EAAKA,kBAAkB0B,KAAvB,gBACzB,EAAK5B,aAAe,EAAKA,aAAa4B,KAAlB,gBACpB,EAAKpC,aAAe,EAAKA,aAAaoC,KAAlB,gBACpB,EAAKhB,iBAAmB,EAAKA,iBAAiBgB,KAAtB,gBA/Bd,E,gEAkCO,IAAD,OAChBG,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACPE,EAAUF,EAASG,KAAnBD,MACRE,QAAQC,IAAIL,EAASG,MACrB,EAAKG,SAAS,CAAEpB,YAAagB,OAErCK,KAAKX,a,iCAIL,IAAMY,EAAWjC,SAASC,eAAe,aACnCiC,EAAUD,EAASE,WAAW,MAC9BC,EAAM,IAAIC,MAHT,EAImCL,KAAK3C,MAAvCqB,EAJD,EAICA,IAAK/B,EAJN,EAIMA,MAAOD,EAJb,EAIaA,OAAQ4B,EAJrB,EAIqBA,UAJrB,EAKyBD,EAAiB1B,EAAOD,EAAQ4B,GAAxDC,EALD,EAKCA,UAAWC,EALZ,EAKYA,SACnB4B,EAAI5D,IAAMkC,EACVmB,QAAQC,IAAI,WAAWpB,EAAIF,EAASD,GACpC6B,EAAIE,OAAS,WACTL,EAASvD,OAAS6B,EAClB0B,EAAStD,MAAQ6B,EACjB0B,EAAQK,UAAUH,EAAK,EAAG,EAAGzD,EAAOD,EAAQ,EAAG,EAAG8B,EAAUD,IAEhEyB,KAAKD,SAAS,CAAEnB,MAAOwB,M,gCAIvB,IACMF,EADWlC,SAASC,eAAe,aAChBkC,WAAW,MAF9B,EAG0GH,KAAK3C,MAA7GuB,EAHF,EAGEA,MAAOtB,EAHT,EAGSA,QAASG,EAHlB,EAGkBA,SAAUE,EAH5B,EAG4BA,eAAgBC,EAH5C,EAG4CA,WAAYC,EAHxD,EAGwDA,YAAaC,EAHrE,EAGqEA,kBAAmBpB,EAHxF,EAGwFA,OAAQC,EAHhG,EAGgGA,MAEtGuD,EAAQK,UAAU3B,EAAO,EAAG,EAAGjC,EAAOD,EAAQ,EAAG,EAAGC,EAAOD,GAC3DwD,EAAQM,KAAO,yBAEf,IAAMC,EAAWP,EAAQQ,YAAYpD,GAASX,MACxCgE,EAAcT,EAAQQ,YAAY9C,GAAYjB,MACpDuD,EAAQU,YAAcjD,EACtBuC,EAAQW,WAAWvD,EAASX,EAAQ,EAAI8D,EAAW,EAAG,IACtDP,EAAQU,YAAc9C,EACtBoC,EAAQW,WAAWjD,EAAYjB,EAAQ,EAAIgE,EAAc,EAAGjE,EAAS,IACrEwD,EAAQY,UAAYrD,EACpByC,EAAQa,SAASzD,EAASX,EAAQ,EAAI8D,EAAW,EAAG,IACpDP,EAAQY,UAAYjD,EACpBqC,EAAQa,SAASnD,EAAYjB,EAAQ,EAAIgE,EAAc,EAAGjE,EAAS,M,wCAIrDsE,GAAQ,IAAD,SACGA,EAAMC,OAAtB/D,EADa,EACbA,KAAME,EADO,EACPA,MACd8D,YAAW,WACP,EAAKnB,SAAL,eAAiB7C,EAAOE,MACzB,O,mCAGM4D,GAAQ,IAAD,EACQA,EAAMC,OAAtB/D,EADQ,EACRA,KAAME,EADE,EACFA,MACd4C,KAAKD,SAAL,eAAiB7C,EAAOE,M,mCAGf4D,GACTA,EAAMG,iBACN,IAAMC,EAAUrC,KAAKC,MAAMD,KAAKsC,SAAWrB,KAAK3C,MAAMsB,YAAY2C,QAFlD,EAGetB,KAAK3C,MAAMsB,YAAYyC,GAA9C1C,EAHQ,EAGRA,IAAK/B,EAHG,EAGHA,MAAOD,EAHJ,EAGIA,OAEpBsD,KAAKD,SAAS,CAAErB,IAAKA,EAAK/B,MAAOA,EAAOD,OAAQA,EAAQoC,aAAa,M,uCAGxDkC,GACb,IAAMO,EAAQvB,KACRtB,EAAMO,OAAOuC,IAAIC,gBAAgBT,EAAMC,OAAOS,MAAM,IACpDtB,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WAAY,IAAD,EACYjC,EAAiB2B,KAAKrD,MAAOqD,KAAKtD,QAA1D6B,EADY,EACZA,UAAWC,EADC,EACDA,SACnB+C,EAAMxB,SAAS,CAAErB,MAAK/B,MAAO6B,EAAU9B,OAAQ6B,EAAWO,aAAa,KAE3EsB,EAAI5D,IAAMkC,I,2CAINsB,KAAK3C,MAAMyB,cACXkB,KAAKD,SAAS,CAAEjB,aAAa,IAC7BkB,KAAKX,YAETW,KAAKV,Y,+BAIL,OACI,kBAAC,EAAD,CACIjC,MAAO2C,KAAK3C,MACZL,aAAcgD,KAAKhD,aACnBQ,aAAcwC,KAAKxC,aACnBE,kBAAmBsC,KAAKtC,kBACxBU,iBAAkB4B,KAAK5B,uB,GAjIXuD,aCDbC,MATf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAACC,EAAD,QCIQC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpE,SAASC,eAAe,SDyHpB,kBAAmBoE,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.414d5740.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                // src=\"https://upload.wikimedia.org/wikipedia/en/9/9a/Trollface_non-free.png\" \r\n                src=\"http://assets.stickpng.com/images/580b585b2edbce24c47b2a2f.png\"\r\n                alt=\"Problem?\"\r\n                height=\"100px\"\r\n                width=\"100px\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nfunction displayMeme(props){\r\n    return (\r\n        <div className=\"memeRoot\">\r\n            <form className=\"meme-form\" onSubmit={props.handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"topText\"\r\n                    placeholder=\"Top Text\"\r\n                    value={props.state.topText}\r\n                    onChange={props.handleChange}\r\n                />\r\n                <br />\r\n                <label>\r\n                    <span> Text Color </span>\r\n                    <input\r\n                        type=\"color\"\r\n                        name=\"topColor\"\r\n                        value={props.state.topColor}\r\n                        onChange={props.handleColorChnage}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    <span> Border Color  </span>\r\n                    <input\r\n                        type=\"color\"\r\n                        name=\"topBorderColor\"\r\n                        value={props.state.topBorderColor}\r\n                        onChange={props.handleColorChnage}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"bottomText\"\r\n                    placeholder=\"Bottom Text\"\r\n                    value={props.state.bottomText}\r\n                    onChange={props.handleChange}\r\n                />\r\n                <br />\r\n                <label>\r\n                    <span> Text Color  </span>\r\n                    <input\r\n                        type=\"color\"\r\n                        name=\"bottomColor\"\r\n                        value={props.state.bottomColor}\r\n                        onChange={props.handleColorChnage}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    <span> Border Color  </span>\r\n                    <input\r\n                        type=\"color\"\r\n                        name=\"bottomBorderColor\"\r\n                        value={props.state.bottomBorderColor}\r\n                        onChange={props.handleColorChnage}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Gen</button>\r\n                <p>or</p>\r\n                <button className=\"cutom-file-upload\" type=\"button\" onClick={() => {\r\n                    const input = document.getElementById('file-upload');\r\n                    input.click();\r\n                }}>Upload Your Photo</button>\r\n                <input id=\"file-upload\" type=\"file\" onChange={props.handleFileChange} />\r\n            </form>\r\n            <div className=\"meme\">\r\n                <center>\r\n                    <canvas id=\"my-canvas\" width=\"568px\" height=\"335px\"/>\r\n                </center>\r\n            </div>\r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default displayMeme","import React, { Component } from \"react\"\r\nimport DisplayMeme from './displayMeme'\r\n\r\nconst checkImageHeight = (width, height, maxHeight) => {\r\n    let newheight = height\r\n    let newwidth = width\r\n    if (height>maxHeight){\r\n        let ratio = maxHeight/height\r\n        newwidth = width * ratio\r\n        newheight = maxHeight\r\n    }\r\n    return {newheight, newwidth}\r\n}\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        // Add a texts array insted of different text options,\r\n        // Use this array to store objects having details like \r\n        // Text, color, BColor, size, font?maybe\r\n\r\n        // Create a draw function which will be called after every change\r\n\r\n        // http://jsfiddle.net/m1erickson/9xAGa/\r\n        \r\n        this.state = {\r\n            topText: \"\",\r\n            topColor: \"#000000\",\r\n            topBorderColor: \"#FFFFFF\",\r\n            bottomText: \"\",\r\n            bottomColor: \"#000000\",\r\n            bottomBorderColor: \"#FFFFFF\",\r\n            height: 335,\r\n            width: 568,\r\n            url: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: [],\r\n            image: undefined,\r\n            updateImage: false,\r\n            maxHeight: Math.floor(window.innerHeight*0.8),\r\n        }\r\n        this.componentDidMount = this.componentDidMount.bind(this)\r\n        this.setImage = this.setImage.bind(this)\r\n        this.setText = this.setText.bind(this)\r\n        this.handleColorChnage = this.handleColorChnage.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleFileChange = this.handleFileChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                console.log(response.data);\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n        this.setImage();\r\n    }\r\n\r\n    setImage() {\r\n        const myCanvas = document.getElementById(\"my-canvas\");\r\n        const context = myCanvas.getContext(\"2d\");\r\n        const img = new Image()\r\n        const { url, width, height, maxHeight } = this.state\r\n        const { newheight, newwidth } = checkImageHeight(width, height, maxHeight);\r\n        img.src = url\r\n        console.log(\"setImage\",url,newwidth,newheight)\r\n        img.onload = () => {\r\n            myCanvas.height = newheight\r\n            myCanvas.width = newwidth\r\n            context.drawImage(img, 0, 0, width, height, 0, 0, newwidth, newheight);\r\n        }\r\n        this.setState({ image: img })\r\n    }\r\n\r\n    setText() {\r\n        const myCanvas = document.getElementById(\"my-canvas\");\r\n        const context = myCanvas.getContext(\"2d\");\r\n        const { image, topText, topColor, topBorderColor, bottomText, bottomColor, bottomBorderColor, height, width } = this.state\r\n        // console.log(\"setText\",topText,bottomText)\r\n        context.drawImage(image, 0, 0, width, height, 0, 0, width, height);\r\n        context.font = \"2em impact, sans-serif\"\r\n\r\n        const topWidth = context.measureText(topText).width\r\n        const bottomWidth = context.measureText(bottomText).width\r\n        context.strokeStyle = topBorderColor\r\n        context.strokeText(topText, width / 2 - topWidth / 2, 30)\r\n        context.strokeStyle = bottomBorderColor\r\n        context.strokeText(bottomText, width / 2 - bottomWidth / 2, height - 10)\r\n        context.fillStyle = topColor\r\n        context.fillText(topText, width / 2 - topWidth / 2, 30)\r\n        context.fillStyle = bottomColor\r\n        context.fillText(bottomText, width / 2 - bottomWidth / 2, height - 10)\r\n\r\n        // console.log(\"RENDER TEXT\");\r\n    }\r\n    handleColorChnage(event) {\r\n        const { name, value } = event.target\r\n        setTimeout(() => {\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const { url, width, height } = this.state.allMemeImgs[randNum]\r\n        // console.log(\"handleSubmit\",url,width,height)\r\n        this.setState({ url: url, width: width, height: height, updateImage: true })\r\n    }\r\n\r\n    handleFileChange(event) {\r\n        const scope = this;\r\n        const url = window.URL.createObjectURL(event.target.files[0])\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            const { newheight, newwidth } = checkImageHeight(this.width, this.height)\r\n            scope.setState({ url, width: newwidth, height: newheight, updateImage: true })\r\n        }\r\n        img.src = url;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.updateImage) {\r\n            this.setState({ updateImage: false })\r\n            this.setImage()\r\n        }\r\n        this.setText();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DisplayMeme \r\n                state={this.state} \r\n                handleSubmit={this.handleSubmit} \r\n                handleChange={this.handleChange}\r\n                handleColorChnage={this.handleColorChnage}\r\n                handleFileChange={this.handleFileChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\r\nimport Header from \"./Header\"\r\nimport MemeGenerator from \"./MemeGen\"\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <MemeGenerator />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}